<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="32" failed="3" total="36" passed="1">
  <reporter-output>
  </reporter-output>
  <suite name="CeiloMeterSuite" duration-ms="20350" started-at="2014-07-02T09:45:46Z" finished-at="2014-07-02T09:46:06Z">
    <groups>
      <group name="v2-meters-basic">
        <method signature="MeterListTest.verifyGetMetersResponseCode()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListTest@233d0d04]" name="verifyGetMetersResponseCode" class="org.ceilometer.CeilometerTestAutomationSuite.MeterListTest"/>
      </group> <!-- v2-meters-basic -->
    </groups>
    <test name="Regression1" duration-ms="20350" started-at="2014-07-02T09:45:46Z" finished-at="2014-07-02T09:46:06Z">
      <class name="org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterWithFields">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterWithFields@2766c4b0]" name="beforeClass" is-config="true" duration-ms="4576" started-at="2014-07-02T15:15:46Z" finished-at="2014-07-02T15:15:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="FAIL" signature="meterListResponseJSONObjectsExist()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterWithFields@2766c4b0]" name="meterListResponseJSONObjectsExist" duration-ms="1881" started-at="2014-07-02T15:15:50Z" finished-at="2014-07-02T15:15:52Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterWithFields.meterListResponseJSONObjectsExist(MeterListFilterWithFields.java:31)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:72)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:88)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- meterListResponseJSONObjectsExist -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterWithFields@2766c4b0]" name="afterClass" is-config="true" duration-ms="0" started-at="2014-07-02T15:16:05Z" finished-at="2014-07-02T15:16:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="SKIP" signature="validateMeterListResponseJSONFields()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterWithFields@2766c4b0]" name="validateMeterListResponseJSONFields" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:05Z" finished-at="2014-07-02T15:16:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateMeterListResponseJSONFields -->
        <test-method status="SKIP" signature="verifyMeterListFilterWithMeterIdResponseCode()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterWithFields@2766c4b0]" name="verifyMeterListFilterWithMeterIdResponseCode" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:05Z" finished-at="2014-07-02T15:16:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyMeterListFilterWithMeterIdResponseCode -->
        <test-method status="SKIP" signature="verifyMeterListFilterWithMeterIdAllJSONFieldsExist()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterWithFields@2766c4b0]" name="verifyMeterListFilterWithMeterIdAllJSONFieldsExist" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:05Z" finished-at="2014-07-02T15:16:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyMeterListFilterWithMeterIdAllJSONFieldsExist -->
      </class> <!-- org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterWithFields -->
      <class name="org.ceilometer.CeilometerTestAutomationSuite.FilterQueryProjectIDTest">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.FilterQueryProjectIDTest@1102b5a9]" name="beforeClass" is-config="true" duration-ms="654" started-at="2014-07-02T15:16:00Z" finished-at="2014-07-02T15:16:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="SKIP" signature="projectIdFilterQueryTestResponseAssertionTest()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.FilterQueryProjectIDTest@1102b5a9]" name="projectIdFilterQueryTestResponseAssertionTest" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:01Z" finished-at="2014-07-02T15:16:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- projectIdFilterQueryTestResponseAssertionTest -->
        <test-method status="SKIP" signature="projectIdFilterQueryResponseAllJSONfieldsExist()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.FilterQueryProjectIDTest@1102b5a9]" name="projectIdFilterQueryResponseAllJSONfieldsExist" duration-ms="1" started-at="2014-07-02T15:16:06Z" depends-on-methods="org.ceilometer.CeilometerTestAutomationSuite.FilterQueryProjectIDTest.projectIdFilterQueryTestResponseAssertionTest" finished-at="2014-07-02T15:16:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- projectIdFilterQueryResponseAllJSONfieldsExist -->
        <test-method status="SKIP" signature="projectIdFilterQueryVerifyProjectIdValue()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.FilterQueryProjectIDTest@1102b5a9]" name="projectIdFilterQueryVerifyProjectIdValue" duration-ms="1" started-at="2014-07-02T15:16:06Z" depends-on-methods="org.ceilometer.CeilometerTestAutomationSuite.FilterQueryProjectIDTest.projectIdFilterQueryTestResponseAssertionTest" finished-at="2014-07-02T15:16:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- projectIdFilterQueryVerifyProjectIdValue -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.FilterQueryProjectIDTest@1102b5a9]" name="afterClass" is-config="true" duration-ms="0" started-at="2014-07-02T15:16:06Z" finished-at="2014-07-02T15:16:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- org.ceilometer.CeilometerTestAutomationSuite.FilterQueryProjectIDTest -->
      <class name="org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_GE_Test">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_GE_Test@2439a391]" name="beforeClass" is-config="true" duration-ms="661" started-at="2014-07-02T15:16:02Z" finished-at="2014-07-02T15:16:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="SKIP" signature="timeStampFilterGreaterThanOrEqualToQueryResponseAllJSONfieldsExist()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_GE_Test@2439a391]" name="timeStampFilterGreaterThanOrEqualToQueryResponseAllJSONfieldsExist" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:03Z" finished-at="2014-07-02T15:16:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- timeStampFilterGreaterThanOrEqualToQueryResponseAllJSONfieldsExist -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_GE_Test@2439a391]" name="afterClass" is-config="true" duration-ms="0" started-at="2014-07-02T15:16:03Z" finished-at="2014-07-02T15:16:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="SKIP" signature="timeStampFilterGreaterThanOrEqualToQueryResponseAssertion()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_GE_Test@2439a391]" name="timeStampFilterGreaterThanOrEqualToQueryResponseAssertion" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:03Z" finished-at="2014-07-02T15:16:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- timeStampFilterGreaterThanOrEqualToQueryResponseAssertion -->
      </class> <!-- org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_GE_Test -->
      <class name="org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterWithFieldsTest">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterWithFieldsTest@7d2193ae]" name="beforeClass" is-config="true" duration-ms="1374" started-at="2014-07-02T15:15:52Z" finished-at="2014-07-02T15:15:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="FAIL" signature="meterListResponseJSONObjectsExist()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterWithFieldsTest@7d2193ae]" name="meterListResponseJSONObjectsExist" duration-ms="1229" started-at="2014-07-02T15:15:53Z" finished-at="2014-07-02T15:15:55Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterWithFieldsTest.meterListResponseJSONObjectsExist(MeterListFilterWithFieldsTest.java:31)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:72)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:88)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- meterListResponseJSONObjectsExist -->
        <test-method status="SKIP" signature="validateMeterListResponseJSONFields()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterWithFieldsTest@7d2193ae]" name="validateMeterListResponseJSONFields" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:05Z" finished-at="2014-07-02T15:16:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateMeterListResponseJSONFields -->
        <test-method status="SKIP" signature="verifyMeterListFilterWithMeterIdAllJSONFieldsExist()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterWithFieldsTest@7d2193ae]" name="verifyMeterListFilterWithMeterIdAllJSONFieldsExist" duration-ms="1" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:05Z" finished-at="2014-07-02T15:16:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyMeterListFilterWithMeterIdAllJSONFieldsExist -->
        <test-method status="SKIP" signature="verifyMeterListFilterWithMeterIdResponseCode()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterWithFieldsTest@7d2193ae]" name="verifyMeterListFilterWithMeterIdResponseCode" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:05Z" finished-at="2014-07-02T15:16:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyMeterListFilterWithMeterIdResponseCode -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterWithFieldsTest@7d2193ae]" name="afterClass" is-config="true" duration-ms="0" started-at="2014-07-02T15:16:05Z" finished-at="2014-07-02T15:16:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterWithFieldsTest -->
      <class name="org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_EQ_Test">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_EQ_Test@29d896d6]" name="beforeClass" is-config="true" duration-ms="634" started-at="2014-07-02T15:16:01Z" finished-at="2014-07-02T15:16:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="SKIP" signature="timeStampFilterEqualsToQueryResponseAssertion()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_EQ_Test@29d896d6]" name="timeStampFilterEqualsToQueryResponseAssertion" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:02Z" finished-at="2014-07-02T15:16:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- timeStampFilterEqualsToQueryResponseAssertion -->
        <test-method status="SKIP" signature="timeStampFilterEqualsToQueryResponseAllJSONfieldsExist()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_EQ_Test@29d896d6]" name="timeStampFilterEqualsToQueryResponseAllJSONfieldsExist" duration-ms="1" started-at="2014-07-02T15:16:06Z" depends-on-methods="org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_EQ_Test.timeStampFilterEqualsToQueryResponseAssertion" finished-at="2014-07-02T15:16:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- timeStampFilterEqualsToQueryResponseAllJSONfieldsExist -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_EQ_Test@29d896d6]" name="afterClass" is-config="true" duration-ms="0" started-at="2014-07-02T15:16:06Z" finished-at="2014-07-02T15:16:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_EQ_Test -->
      <class name="org.ceilometer.CeilometerTestAutomationSuite.MeterListTest1">
        <test-method status="PASS" signature="init()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListTest1@5a7f56f8]" name="init" is-config="true" duration-ms="1" started-at="2014-07-02T15:15:57Z" finished-at="2014-07-02T15:15:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListTest1@5a7f56f8]" name="setUp" is-config="true" duration-ms="693" started-at="2014-07-02T15:15:57Z" finished-at="2014-07-02T15:15:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="invalidTokenGetMetersResponseCode()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListTest1@5a7f56f8]" name="invalidTokenGetMetersResponseCode" duration-ms="1181" started-at="2014-07-02T15:15:58Z" finished-at="2014-07-02T15:15:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTokenGetMetersResponseCode -->
        <test-method status="SKIP" signature="verifyGetMetersResponseCode()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListTest1@5a7f56f8]" name="verifyGetMetersResponseCode" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:05Z" finished-at="2014-07-02T15:16:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetMetersResponseCode -->
      </class> <!-- org.ceilometer.CeilometerTestAutomationSuite.MeterListTest1 -->
      <class name="org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_GT_Test">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_GT_Test@48e472f8]" name="beforeClass" is-config="true" duration-ms="692" started-at="2014-07-02T15:16:03Z" finished-at="2014-07-02T15:16:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="SKIP" signature="timeStampFilterGreaterThanQueryResponseAllJSONfieldsExist()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_GT_Test@48e472f8]" name="timeStampFilterGreaterThanQueryResponseAllJSONfieldsExist" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:03Z" finished-at="2014-07-02T15:16:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- timeStampFilterGreaterThanQueryResponseAllJSONfieldsExist -->
        <test-method status="SKIP" signature="timeStampFilterGreaterThanQueryResponseAssertion()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_GT_Test@48e472f8]" name="timeStampFilterGreaterThanQueryResponseAssertion" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:03Z" finished-at="2014-07-02T15:16:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- timeStampFilterGreaterThanQueryResponseAssertion -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_GT_Test@48e472f8]" name="afterClass" is-config="true" duration-ms="0" started-at="2014-07-02T15:16:03Z" finished-at="2014-07-02T15:16:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_GT_Test -->
      <class name="org.ceilometer.CeilometerTestAutomationSuite.MeterListValidatorTest">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListValidatorTest@e381d2b]" name="beforeClass" is-config="true" duration-ms="666" started-at="2014-07-02T15:16:05Z" finished-at="2014-07-02T15:16:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="SKIP" signature="meterListResponseJSONObjectsExist()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListValidatorTest@e381d2b]" name="meterListResponseJSONObjectsExist" duration-ms="1" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:05Z" finished-at="2014-07-02T15:16:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- meterListResponseJSONObjectsExist -->
        <test-method status="SKIP" signature="validateMeterListResponseJSONFields()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListValidatorTest@e381d2b]" name="validateMeterListResponseJSONFields" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:05Z" finished-at="2014-07-02T15:16:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validateMeterListResponseJSONFields -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListValidatorTest@e381d2b]" name="afterClass" is-config="true" duration-ms="0" started-at="2014-07-02T15:16:05Z" finished-at="2014-07-02T15:16:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- org.ceilometer.CeilometerTestAutomationSuite.MeterListValidatorTest -->
      <class name="org.ceilometer.CeilometerTestAutomationSuite.MeterListWithMeterNameTest">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListWithMeterNameTest@4a96d110]" name="beforeClass" is-config="true" duration-ms="646" started-at="2014-07-02T15:16:05Z" finished-at="2014-07-02T15:16:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="SKIP" signature="meterListWithMeterNameResponseAssertionTest()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListWithMeterNameTest@4a96d110]" name="meterListWithMeterNameResponseAssertionTest" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:06Z" finished-at="2014-07-02T15:16:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- meterListWithMeterNameResponseAssertionTest -->
        <test-method status="SKIP" signature="meterListWithMeterNameAllJSONFieldsExistTest()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListWithMeterNameTest@4a96d110]" name="meterListWithMeterNameAllJSONFieldsExistTest" duration-ms="1" started-at="2014-07-02T15:16:06Z" depends-on-methods="org.ceilometer.CeilometerTestAutomationSuite.MeterListWithMeterNameTest.meterListWithMeterNameResponseAssertionTest" finished-at="2014-07-02T15:16:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- meterListWithMeterNameAllJSONFieldsExistTest -->
        <test-method status="SKIP" signature="meterListWithMeterNameVerifyMeterNameTest()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListWithMeterNameTest@4a96d110]" name="meterListWithMeterNameVerifyMeterNameTest" duration-ms="1" started-at="2014-07-02T15:16:06Z" depends-on-methods="org.ceilometer.CeilometerTestAutomationSuite.MeterListWithMeterNameTest.meterListWithMeterNameResponseAssertionTest" finished-at="2014-07-02T15:16:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- meterListWithMeterNameVerifyMeterNameTest -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListWithMeterNameTest@4a96d110]" name="afterClass" is-config="true" duration-ms="0" started-at="2014-07-02T15:16:06Z" finished-at="2014-07-02T15:16:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- org.ceilometer.CeilometerTestAutomationSuite.MeterListWithMeterNameTest -->
      <class name="org.ceilometer.CeilometerTestAutomationSuite.FilterQueryByUserIDTest">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.FilterQueryByUserIDTest@4bfb1305]" name="beforeClass" is-config="true" duration-ms="703" started-at="2014-07-02T15:15:59Z" finished-at="2014-07-02T15:16:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="SKIP" signature="userIdFilterQueryResponseAllJSONfieldsExist()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.FilterQueryByUserIDTest@4bfb1305]" name="userIdFilterQueryResponseAllJSONfieldsExist" duration-ms="1" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:00Z" finished-at="2014-07-02T15:16:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userIdFilterQueryResponseAllJSONfieldsExist -->
        <test-method status="SKIP" signature="userIdFilterQueryResponseAssertionTest()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.FilterQueryByUserIDTest@4bfb1305]" name="userIdFilterQueryResponseAssertionTest" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:00Z" finished-at="2014-07-02T15:16:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userIdFilterQueryResponseAssertionTest -->
        <test-method status="SKIP" signature="userIdFilterQueryVerifyuserIdValue()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.FilterQueryByUserIDTest@4bfb1305]" name="userIdFilterQueryVerifyuserIdValue" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:00Z" finished-at="2014-07-02T15:16:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userIdFilterQueryVerifyuserIdValue -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.FilterQueryByUserIDTest@4bfb1305]" name="afterClass" is-config="true" duration-ms="0" started-at="2014-07-02T15:16:00Z" finished-at="2014-07-02T15:16:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- org.ceilometer.CeilometerTestAutomationSuite.FilterQueryByUserIDTest -->
      <class name="org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQuerybyServiceIDTest1">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQuerybyServiceIDTest1@3aacbf34]" name="beforeClass" is-config="true" duration-ms="656" started-at="2014-07-02T15:16:01Z" finished-at="2014-07-02T15:16:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="SKIP" signature="serviceIdFilterQueryResponseAllJSONfieldsExist()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQuerybyServiceIDTest1@3aacbf34]" name="serviceIdFilterQueryResponseAllJSONfieldsExist" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:01Z" finished-at="2014-07-02T15:16:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- serviceIdFilterQueryResponseAllJSONfieldsExist -->
        <test-method status="SKIP" signature="serviceIdFilterQueryResponseAssertionTest()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQuerybyServiceIDTest1@3aacbf34]" name="serviceIdFilterQueryResponseAssertionTest" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:01Z" finished-at="2014-07-02T15:16:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- serviceIdFilterQueryResponseAssertionTest -->
        <test-method status="SKIP" signature="serviceIdFilterQueryResponseVerifyserviceIdValue()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQuerybyServiceIDTest1@3aacbf34]" name="serviceIdFilterQueryResponseVerifyserviceIdValue" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:01Z" finished-at="2014-07-02T15:16:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- serviceIdFilterQueryResponseVerifyserviceIdValue -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQuerybyServiceIDTest1@3aacbf34]" name="afterClass" is-config="true" duration-ms="0" started-at="2014-07-02T15:16:01Z" finished-at="2014-07-02T15:16:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQuerybyServiceIDTest1 -->
      <class name="org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_LT_Test">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_LT_Test@45a51ac0]" name="beforeClass" is-config="true" duration-ms="745" started-at="2014-07-02T15:16:04Z" finished-at="2014-07-02T15:16:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="SKIP" signature="timeStampFilterLessThanQueryResponseAssertion()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_LT_Test@45a51ac0]" name="timeStampFilterLessThanQueryResponseAssertion" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:05Z" finished-at="2014-07-02T15:16:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- timeStampFilterLessThanQueryResponseAssertion -->
        <test-method status="SKIP" signature="timeStampFilterLessThanQueryResponseAllJSONfieldsExist()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_LT_Test@45a51ac0]" name="timeStampFilterLessThanQueryResponseAllJSONfieldsExist" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:05Z" finished-at="2014-07-02T15:16:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- timeStampFilterLessThanQueryResponseAllJSONfieldsExist -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_LT_Test@45a51ac0]" name="afterClass" is-config="true" duration-ms="1" started-at="2014-07-02T15:16:05Z" finished-at="2014-07-02T15:16:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_LT_Test -->
      <class name="org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_LE_Test">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_LE_Test@2d40037d]" name="beforeClass" is-config="true" duration-ms="659" started-at="2014-07-02T15:16:03Z" finished-at="2014-07-02T15:16:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_LE_Test@2d40037d]" name="afterClass" is-config="true" duration-ms="1" started-at="2014-07-02T15:16:04Z" finished-at="2014-07-02T15:16:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="SKIP" signature="timeStampFilterLessThanOrEqualToQueryResponseAssertion()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_LE_Test@2d40037d]" name="timeStampFilterLessThanOrEqualToQueryResponseAssertion" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:04Z" finished-at="2014-07-02T15:16:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- timeStampFilterLessThanOrEqualToQueryResponseAssertion -->
        <test-method status="SKIP" signature="timeStampFilterLessThanOrEqualToQueryResponseAllJSONfieldsExist()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_LE_Test@2d40037d]" name="timeStampFilterLessThanOrEqualToQueryResponseAllJSONfieldsExist" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:04Z" finished-at="2014-07-02T15:16:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- timeStampFilterLessThanOrEqualToQueryResponseAllJSONfieldsExist -->
      </class> <!-- org.ceilometer.CeilometerTestAutomationSuite.MeterListFilterQueryByTimestamp_LE_Test -->
      <class name="org.ceilometer.CeilometerTestAutomationSuite.MeterListTest">
        <test-method status="PASS" signature="init()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListTest@233d0d04]" name="init" is-config="true" duration-ms="1" started-at="2014-07-02T15:15:55Z" finished-at="2014-07-02T15:15:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListTest@233d0d04]" name="setUp" is-config="true" duration-ms="1391" started-at="2014-07-02T15:15:55Z" finished-at="2014-07-02T15:15:56Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="FAIL" signature="verifyGetMetersResponseCode()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListTest@233d0d04]" name="verifyGetMetersResponseCode" duration-ms="1266" started-at="2014-07-02T15:15:56Z" finished-at="2014-07-02T15:15:57Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [500]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertEquals(Assert.java:123)
	at org.testng.Assert.assertEquals(Assert.java:370)
	at org.testng.Assert.assertEquals(Assert.java:380)
	at org.ceilometer.CeilometerTestAutomationSuite.MeterListTest.verifyGetMetersResponseCode(MeterListTest.java:63)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:72)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:88)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetMetersResponseCode -->
        <test-method status="SKIP" signature="invalidTokenGetMetersResponseCode()[pri:0, instance:org.ceilometer.CeilometerTestAutomationSuite.MeterListTest@233d0d04]" name="invalidTokenGetMetersResponseCode" duration-ms="0" depends-on-groups="v2-meters-basic" started-at="2014-07-02T15:16:05Z" finished-at="2014-07-02T15:16:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidTokenGetMetersResponseCode -->
      </class> <!-- org.ceilometer.CeilometerTestAutomationSuite.MeterListTest -->
    </test> <!-- Regression1 -->
  </suite> <!-- CeiloMeterSuite -->
</testng-results>
